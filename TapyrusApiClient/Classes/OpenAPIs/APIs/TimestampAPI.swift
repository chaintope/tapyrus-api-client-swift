//
// TimestampAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TimestampAPI {

    /**
     Timestampを記録
     
     - parameter addTimestampRequest: (body) &#x60;content_hash&#x60;, &#x60;prefix&#x60;を受け取り、ブロックチェーンにハッシュ値をタイムスタンプとして記録します。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addTimestamp(addTimestampRequest: AddTimestampRequest? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addTimestampWithRequestBuilder(addTimestampRequest: addTimestampRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Timestampを記録
     - POST /timestamp
     - ブロックチェーンにハッシュ値をタイムスタンプとして記録します。
     - parameter addTimestampRequest: (body) &#x60;content_hash&#x60;, &#x60;prefix&#x60;を受け取り、ブロックチェーンにハッシュ値をタイムスタンプとして記録します。 (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func addTimestampWithRequestBuilder(addTimestampRequest: AddTimestampRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/timestamp"
        let localVariableURLString = TapyrusApiClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addTimestampRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TapyrusApiClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Timestamp一覧表示
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTimestamps(apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: [AnyCodable]?, _ error: Error?) -> Void)) {
        getTimestampsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Timestamp一覧表示
     - GET /timestamps
     - ブロックチェーンに記録したタイムスタンプを取得し、`content_hash`,`prefix`,`txid`を一覧で表示します。
     - returns: RequestBuilder<[AnyCodable]> 
     */
    open class func getTimestampsWithRequestBuilder() -> RequestBuilder<[AnyCodable]> {
        let localVariablePath = "/timestamps"
        let localVariableURLString = TapyrusApiClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AnyCodable]>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
