//
// TokenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TokenAPI {

    /**
     トークンの焼却
     
     - parameter tokenId: (path) トークンの識別子。 
     - parameter amount: (query) &#x60;amount&#x60;を受け取り、指定した量のトークンを焼却します。 &#x60;amount&#x60;が未入力の場合全てのトークンを焼却します。  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func burnToken(tokenId: String, amount: Int? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        burnTokenWithRequestBuilder(tokenId: tokenId, amount: amount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     トークンの焼却
     - DELETE /tokens/{token_id}/burn
     - 任意の数のトークンを焼却します。
     - parameter tokenId: (path) トークンの識別子。 
     - parameter amount: (query) &#x60;amount&#x60;を受け取り、指定した量のトークンを焼却します。 &#x60;amount&#x60;が未入力の場合全てのトークンを焼却します。  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func burnTokenWithRequestBuilder(tokenId: String, amount: Int? = nil) -> RequestBuilder<Void> {
        var path = "/tokens/{token_id}/burn"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = TapyrusApiClient.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "amount": amount?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = TapyrusApiClient.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     トークンの総量取得
     
     - parameter confirmationOnly: (query) オプションで&#x60;confirmation_only&#x60;を設定でき、&#x60;true&#x60;の場合ブロックチェーン上で承認済みのトークンのみを取得し、&#x60;false&#x60;の場合未承認のトークンも含めて取得します。デフォルトは&#x60;true&#x60;です。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokens(confirmationOnly: Bool? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: [GetTokensResponse]?, _ error: Error?) -> Void)) {
        getTokensWithRequestBuilder(confirmationOnly: confirmationOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     トークンの総量取得
     - GET /tokens
     - 所有するトークンの総量を取得し、トークン識別子(`token_id`)ごとに総量(`amount`)を一覧で表示します。
     - parameter confirmationOnly: (query) オプションで&#x60;confirmation_only&#x60;を設定でき、&#x60;true&#x60;の場合ブロックチェーン上で承認済みのトークンのみを取得し、&#x60;false&#x60;の場合未承認のトークンも含めて取得します。デフォルトは&#x60;true&#x60;です。 (optional)
     - returns: RequestBuilder<[GetTokensResponse]> 
     */
    open class func getTokensWithRequestBuilder(confirmationOnly: Bool? = nil) -> RequestBuilder<[GetTokensResponse]> {
        let path = "/tokens"
        let URLString = TapyrusApiClient.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "confirmation_only": confirmationOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GetTokensResponse]>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     トークンの新規発行
     
     - parameter issueTokenRequest: (body) &#x60;amount&#x60;を受け取り指定した数のトークンを新規発行します。 任意で&#x60;token_type&#x60;を設定し、トークンの種類を指定できます。 &#x60;token_type&#x60;が未指定な場合、再発行可能なトークンが発行されます。 トークンの種類は以下の通りです。 - 1: 再発行可能なトークン - 2: 再発行不可能なトークン - 3: NFT  また、&#x60;token_type&#x60;が未指定または&#x60;1&#x60;の場合、任意でトークン識別子&#x60;id&#x60;を指定することで、指定したトークン識別子のトークンを再発行します。  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueToken(issueTokenRequest: IssueTokenRequest? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) {
        issueTokenWithRequestBuilder(issueTokenRequest: issueTokenRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     トークンの新規発行
     - POST /tokens/issue
     - 任意の数のトークンを新規発行します。
     - parameter issueTokenRequest: (body) &#x60;amount&#x60;を受け取り指定した数のトークンを新規発行します。 任意で&#x60;token_type&#x60;を設定し、トークンの種類を指定できます。 &#x60;token_type&#x60;が未指定な場合、再発行可能なトークンが発行されます。 トークンの種類は以下の通りです。 - 1: 再発行可能なトークン - 2: 再発行不可能なトークン - 3: NFT  また、&#x60;token_type&#x60;が未指定または&#x60;1&#x60;の場合、任意でトークン識別子&#x60;id&#x60;を指定することで、指定したトークン識別子のトークンを再発行します。  (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func issueTokenWithRequestBuilder(issueTokenRequest: IssueTokenRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/tokens/issue"
        let URLString = TapyrusApiClient.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issueTokenRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     トークンの再発行
     
     - parameter tokenId: (path) トークンの識別子。 
     - parameter reissueTokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reissueToken(tokenId: String, reissueTokenRequest: ReissueTokenRequest? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) {
        reissueTokenWithRequestBuilder(tokenId: tokenId, reissueTokenRequest: reissueTokenRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     トークンの再発行
     - POST /tokens/{token_id}/reissue
     - 指定した識別子を持つ再発行可能なトークンを任意の量再発行します。
     - parameter tokenId: (path) トークンの識別子。 
     - parameter reissueTokenRequest: (body)  (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func reissueTokenWithRequestBuilder(tokenId: String, reissueTokenRequest: ReissueTokenRequest? = nil) -> RequestBuilder<TokenResponse> {
        var path = "/tokens/{token_id}/reissue"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = TapyrusApiClient.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reissueTokenRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     トークンの送付
     
     - parameter tokenId: (path) トークンの識別子。 
     - parameter transferTokenRequest: (body) &#x60;address&#x60;でトークンを送付する相手のアドレスを指定し、&#x60;amount&#x60;で送付するトークンの量を指定します。 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transferToken(tokenId: String, transferTokenRequest: TransferTokenRequest, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) {
        transferTokenWithRequestBuilder(tokenId: tokenId, transferTokenRequest: transferTokenRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     トークンの送付
     - PUT /tokens/{token_id}/transfer
     - 任意の数のトークンを指定したアドレスに対して送付します。
     - parameter tokenId: (path) トークンの識別子。 
     - parameter transferTokenRequest: (body) &#x60;address&#x60;でトークンを送付する相手のアドレスを指定し、&#x60;amount&#x60;で送付するトークンの量を指定します。 
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func transferTokenWithRequestBuilder(tokenId: String, transferTokenRequest: TransferTokenRequest) -> RequestBuilder<TokenResponse> {
        var path = "/tokens/{token_id}/transfer"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = TapyrusApiClient.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferTokenRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }
}
