//
// PaymentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PaymentAPI {

    /**
     資金の送金
     
     - parameter paymentRequest: (body) &#x60;address&#x60;, &#x60;amount&#x60;を受け取り、アドレスに対して指定した額の資金(tapyrus)を送金します。 任意で&#x60;fee&#x60;を設定し、送金手数料を指定できます。  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transfer(paymentRequest: PaymentRequest? = nil, apiResponseQueue: DispatchQueue = TapyrusApiClient.apiResponseQueue, completion: @escaping ((_ data: PaymentResponse?, _ error: Error?) -> Void)) {
        transferWithRequestBuilder(paymentRequest: paymentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     資金の送金
     - POST /payment
     - 指定したアドレスに任意のtapyrusを送金します。
     - parameter paymentRequest: (body) &#x60;address&#x60;, &#x60;amount&#x60;を受け取り、アドレスに対して指定した額の資金(tapyrus)を送金します。 任意で&#x60;fee&#x60;を設定し、送金手数料を指定できます。  (optional)
     - returns: RequestBuilder<PaymentResponse> 
     */
    open class func transferWithRequestBuilder(paymentRequest: PaymentRequest? = nil) -> RequestBuilder<PaymentResponse> {
        let path = "/payment"
        let URLString = TapyrusApiClient.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PaymentResponse>.Type = TapyrusApiClient.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }
}
