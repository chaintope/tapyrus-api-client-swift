//
// CreateUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateUserRequest: Codable, Hashable {

    /** [Token Endpoint](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint) の応答に含まれる id_token */
    public var idToken: String
    /** [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) における issuer */
    public var issuer: String
    /** [OAuth 2.0 Client Credential](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1) における client_id */
    public var clientId: String
    /** [Token Endpoint](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint) の応答に含まれる access_token */
    public var accessToken: String

    public init(idToken: String, issuer: String, clientId: String, accessToken: String) {
        self.idToken = idToken
        self.issuer = issuer
        self.clientId = clientId
        self.accessToken = accessToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idToken = "id_token"
        case issuer
        case clientId = "client_id"
        case accessToken = "access_token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(idToken, forKey: .idToken)
        try container.encode(issuer, forKey: .issuer)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(accessToken, forKey: .accessToken)
    }
}

